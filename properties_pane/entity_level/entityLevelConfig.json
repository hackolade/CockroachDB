/*
* Copyright © 2016-2020 by IntegrIT S.A. dba Hackolade.  All rights reserved.
*
* The copyright to the computer software herein is the property of IntegrIT S.A.
* The software may be used and/or copied only with the written permission of
* IntegrIT S.A. or in accordance with the terms and conditions stipulated in
* the agreement/contract under which the software has been supplied.

In order to define custom properties for any object's properties pane, you may copy/paste from the following,
making sure that you maintain a proper JSON format.

			{
				"propertyName": "Simple text",
				"propertyKeyword": "simpletextProp",
				"propertyType": "text",
				"sampleGen": "&containerName|&entityName|&random|<value>"
			},
			{
				"propertyName": "Text area",
				"propertyKeyword": "textareaProp",
				"propertyTooltip": "Popup for multi-line text entry",
				"propertyType": "details",
				"template": "textarea"
			},
			{
				"propertyName": "Dropdown selection",
				"propertyKeyword": "dropdownProp",
				"propertyTooltip": "Select from list of options",
				"propertyType": "select",
				"options": [
					"Option 1",
					"Option 2",
					"Option 3",
					"Option 4"
				]
			},
			{
				"propertyName": "Numeric",
				"propertyKeyword": "numericProp",
				"propertyValidate": true,
				"propertyType": "numeric",
				"valueType": "number",
				"allowNegative": false,
				"sampleGen": "&containerName|&entityName|&random|<value>"
			},
			{
				"propertyName": "Checkbox",
				"propertyKeyword": "checkboxProp",
				"propertyType": "checkbox"
			},
			{
				"propertyName": "Group",
				"propertyKeyword": "grpProp",
				"propertyType": "group",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Simple Grp Text",
						"propertyKeyword": "simpleGrpText",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Group Number",
						"propertyKeyword": "grpNumber",
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false
					}
				]
			},
// “groupInput” can have the following states - 0 items, 1 item, and many items.
// “blockInput” has only 2 states - 0 items or 1 item.
// This gives us an easy way to represent it as an object and not as an array internally which is beneficial for processing
// and forward-engineering in particular.
			{
				"propertyName": "Block",
				"propertyKeyword": "grpProp",
				"propertyType": "block",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Simple Grp Text",
						"propertyKeyword": "simpleGrpText",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Group Number",
						"propertyKeyword": "grpNumber",
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false
					}
				]
			},
			{
				"propertyName": "Field List",
				"propertyKeyword": "keyList",
				"propertyType": "fieldList",
				"template": "orderedList"
			},
			{
				"propertyName": "List with attribute",
				"propertyKeyword": "keyListOrder",
				"propertyType": "fieldList",
				"template": "orderedList",
				"attributeList": [
					"ascending",
					"descending"
				]
			}

*/
[
	{
		"lowerTab": "Details",
		"structure": [
			{
				"propertyName": "Comments",
				"propertyKeyword": "description",
				"shouldValidate": false,
				"propertyTooltip": "comments",
				"addTimestampButton": false,
				"propertyType": "details",
				"template": "textarea"
			},
			{
				"propertyName": "Temporary",
				"propertyKeyword": "temporary",
				"propertyType": "checkbox"
			},
			{
				"propertyName": "Unlogged",
				"propertyKeyword": "unlogged",
				"propertyType": "checkbox"
			},
			{
				"propertyName": "If not exists",
				"propertyKeyword": "ifNotExist",
				"propertyTooltip": "When the IF NOT EXISTS clause is used, CockroachDB will return a warning instead of an error if the specified table already exists. Cannot be used together with the OR REPLACE clause.",
				"propertyType": "checkbox",
				"defaultValue": true
			},
			{
				"propertyName": "Partitioning",
				"propertyKeyword": "partitioning",
				"propertyType": "group",
				"groupItemLimit": 1,
				"propertyTooltip": "Determines how a partitioned table's rows are distributed across partitions",
				"structure": [
					{
						"propertyName": "Partition method",
						"propertyKeyword": "partitionMethod",
						"propertyTooltip": "Choose the desired partition method",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "RANGE", "LIST", "HASH"]
					},
					{
						"propertyName": "Partition by",
						"propertyKeyword": "partitionBy",
						"propertyTooltip": "",
						"propertyType": "select",
						"defaultValue": "keys",
						"options": ["keys", "expression"]
					},
					{
						"propertyName": "Partition key",
						"propertyKeyword": "compositePartitionKey",
						"propertyType": "compositeKeySetter",
						"disabledItemStrategy": "default",
						"isCompositeKey": true,
						"setPrimaryKey": false,
						"template": "collectiontree",
						"abbr": "PK",
						"dependency": {
							"key": "partitionBy",
							"value": "keys"
						}
					},
					{
						"propertyName": "Expression",
						"propertyKeyword": "partitioning_expression",
						"propertyTooltip": "A SQL expression that returns a value from each row. In the simplest cases, it is a column name. This value is used to determine which partition should contain a row.",
						"propertyType": "details",
						"template": "textarea",
						"markdown": false,
						"dependency": {
							"key": "partitionBy",
							"value": "expression"
						}
					}
				]
			},
			{
				"propertyName": "Using method",
				"propertyKeyword": "usingMethod",
				"propertyTooltip": "Optional clause to specify the table access method to use to store the contents for the new table; the method needs be an access method of type TABLE.",
				"propertyType": "text"
			},
			{
				"propertyName": "Storage parameters",
				"propertyKeyword": "storage_parameter",
				"propertyType": "block",
				"propertyTooltip": "For each individual table you create, you can set some table options. ",
				"structure": [
					{
						"propertyName": "Fill factor",
						"propertyKeyword": "fillfactor",
						"propertyType": "numeric",
						"valueType": "number",
						"propertyTooltip": "A percentage between 10 and 100. Complete packing (100) is the default.",
						"minValue": 10,
						"maxValue": 100,
						"step": 1
					},
					{
						"propertyName": "Enable autovacuum",
						"propertyKeyword": "autovacuum_enabled",
						"propertyType": "checkbox",
						"propertyTooltip": "If true, the autovacuum daemon will perform automatic VACUUM and/or ANALYZE operations on this table."
					},
					{
						"propertyName": "Exclude data from backup",
						"propertyKeyword": "exclude_data_from_backup",
						"propertyType": "checkbox",
						"propertyTooltip": "Exclude the data in this table from any future backups.",
						"defaultValue": false
					},
					{
						"propertyName": "Enable SQL stats auto collection",
						"propertyKeyword": "sql_stats_automatic_collection_enabled",
						"propertyType": "checkbox",
						"propertyTooltip": "Enable automatic statistics collection for this table."
					},
					{
						"propertyName": "SQL stats auto collection min stale rows",
						"propertyKeyword": "sql_stats_automatic_collection_min_stale_rows",
						"propertyType": "numeric",
						"valueType": "number",
						"propertyTooltip": "Minimum number of stale rows in this table that will trigger a statistics refresh.",
						"minValue": 0,
						"step": 1
					},
					{
						"propertyName": "SQL stats auto collection fraction stale rows",
						"propertyKeyword": "sql_stats_automatic_collection_fraction_stale_rows",
						"propertyType": "numeric",
						"valueType": "number",
						"propertyTooltip": "Fraction of stale rows in this table that will trigger a statistics refresh.",
						"minValue": 0,
						"maxValue": 1
					},
					{
						"propertyName": "Enable SQL stats forecast",
						"propertyKeyword": "sql_stats_forecasts_enabled",
						"propertyType": "checkbox",
						"propertyTooltip": "Enable forecasted statistics collection for this table."
					}
				]
			},
			{
				"propertyName": "On commit",
				"propertyKeyword": "on_commit",
				"propertyTooltip": "Controls the behavior of temporary tables at the end of a transaction block can be controlled.",
				"propertyType": "select",
				"defaultValue": "PRESERVE ROWS",
				"options": ["PRESERVE ROWS", "DELETE ROWS", "DROP"],
				"dependency": {
					"key": "temporary",
					"value": true
				}
			},
			{
				"propertyName": "As Select statement",
				"propertyKeyword": "selectStatement",
				"propertyType": "details",
				"template": "textarea",
				"markdown": false
			},
			{
				"propertyName": "Remarks",
				"propertyKeyword": "comments",
				"propertyTooltip": "remarks",
				"addTimestampButton": true,
				"propertyType": "details",
				"template": "textarea",
				"valueType": "string"
			}
		],
		"columnsRatio": [3.7, 5]
	},
	{
		"lowerTab": "Composite keys",
		"structure": [
			{
				"propertyName": "Primary key",
				"propertyType": "group",
				"groupItemLimit": 1,
				"propertyKeyword": "primaryKey",
				"propertyTooltip": {
					"disabled": [
						{
							"tooltip": "Remove the existing single column primary key definition prior to unlock the possibility to create a composite primary key definition for this table",
							"dependency": {
								"type": "and",
								"values": [
									{
										"level": "children",
										"key": "primaryKey",
										"value": true
									},
									{
										"type": "not",
										"values": {
											"level": "children",
											"key": "compositePrimaryKey",
											"value": true
										}
									}
								]
							}
						},
						{
							"tooltip": "Remove or update the existing composite primary key definition prior to unlock the possibility to create a new composite primary key definition for this table",
							"dependency": {
								"key": "primaryKey",
								"minLength": 1
							}
						}
					]
				},
				"structure": [
					{
						"propertyName": "Constraint name",
						"propertyKeyword": "constraintName",
						"propertyTooltip": "",
						"propertyType": "text",
						"validation": {
							"indexKey": "compositePrimaryKey",
							"message": "A primary key constraint cannot be created without any primary key selected"
						}
					},
					{
						"propertyName": "Key",
						"propertyKeyword": "compositePrimaryKey",
						"propertyType": "primaryKeySetter",
						"requiredProperty": true,
						"abbr": "pk"
					},
					{
						"propertyName": "Include non-key columns",
						"propertyKeyword": "indexInclude",
						"propertyType": "fieldList",
						"template": "orderedList",
						"propertyTooltip": "The optional INCLUDE clause specifies a list of columns which will be included in the constraint as non-key columns."
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "indexStorageParameters",
						"propertyType": "details",
						"template": "textarea",
						"markdown": false,
						"addTimestampButton": false
					},
					{
						"propertyName": "Comment",
						"propertyKeyword": "indexComment",
						"propertyTooltip": "comment",
						"addTimestampButton": false,
						"propertyType": "details",
						"template": "textarea"
					},
					{
						"propertyName": "Deferrable",
						"propertyKeyword": "deferrable",
						"propertyTooltip": "\nA constraint that is not deferrable will be checked immediately after every command. Checking of constraints that are deferrable can be postponed until the end of the transaction",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "DEFERRABLE", "NOT DEFERRABLE"]
					},
					{
						"propertyName": "Check time",
						"propertyKeyword": "deferrableConstraintCheckTime",
						"propertyTooltip": "\nIf the constraint is INITIALLY IMMEDIATE, it is checked after each statement. This is the default. If the constraint is INITIALLY DEFERRED, it is checked only at the end of the transaction",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "INITIALLY IMMEDIATE", "INITIALLY DEFERRED"],
						"dependency": {
							"key": "deferrable",
							"value": "DEFERRABLE"
						}
					}
				],
				"disabledOnCondition": [
					{
						"level": "children",
						"value": {
							"type": "and",
							"values": [
								{
									"key": "primaryKey",
									"value": true
								},
								{
									"type": "or",
									"values": [
										{
											"key": "compositePrimaryKey",
											"value": false
										},
										{
											"key": "compositePrimaryKey",
											"exist": false
										}
									]
								},
								{
									"type": "or",
									"values": [
										{
											"key": "compositeUniqueKey",
											"value": false
										},
										{
											"key": "compositeUniqueKey",
											"exist": false
										}
									]
								}
							]
						}
					}
				]
			},
			{
				"propertyName": "Unique key",
				"propertyType": "group",
				"propertyKeyword": "uniqueKey",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Constraint name",
						"propertyKeyword": "constraintName",
						"propertyTooltip": "",
						"propertyType": "text",
						"validation": {
							"indexKey": "compositeUniqueKey",
							"message": "A unique key constraint cannot be created without any unique key selected"
						}
					},
					{
						"propertyName": "Key",
						"propertyKeyword": "compositeUniqueKey",
						"propertyType": "compositeKeySetter",
						"disabledItemStrategy": "default",
						"setPrimaryKey": false,
						"template": "collectiontree",
						"requiredProperty": true,
						"isCompositeKey": true,
						"abbr": "uk"
					},
					{
						"propertyName": "Include non-key columns",
						"propertyKeyword": "indexInclude",
						"propertyType": "fieldList",
						"template": "orderedList",
						"propertyTooltip": "The optional INCLUDE clause specifies a list of columns which will be included in the constraint as non-key columns."
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "indexStorageParameters",
						"propertyType": "details",
						"template": "textarea",
						"markdown": false,
						"addTimestampButton": false
					},
					{
						"propertyName": "Comment",
						"propertyKeyword": "indexComment",
						"propertyTooltip": "comment",
						"addTimestampButton": false,
						"propertyType": "details",
						"template": "textarea"
					},
					{
						"propertyName": "Nulls Distinct",
						"propertyKeyword": "nullsDistinct",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "NULLS DISTINCT", "NULLS NOT DISTINCT"],
						"dependency": {
							"type": "or",
							"values": [
								{
									"level": "model",
									"key": "dbVersion",
									"value": "v15.x"
								}
							]
						}
					},
					{
						"propertyName": "Deferrable",
						"propertyKeyword": "deferrable",
						"propertyTooltip": "\nA constraint that is not deferrable will be checked immediately after every command. Checking of constraints that are deferrable can be postponed until the end of the transaction",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "DEFERRABLE", "NOT DEFERRABLE"]
					},
					{
						"propertyName": "Check time",
						"propertyKeyword": "deferrableConstraintCheckTime",
						"propertyTooltip": "\nIf the constraint is INITIALLY IMMEDIATE, it is checked after each statement. This is the default. If the constraint is INITIALLY DEFERRED, it is checked only at the end of the transaction",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "INITIALLY IMMEDIATE", "INITIALLY DEFERRED"],
						"dependency": {
							"key": "deferrable",
							"value": "DEFERRABLE"
						}
					}
				]
			}
		]
	},
	{
		"lowerTab": "Indexes",
		"structure": [
			{
				"propertyName": "Index",
				"propertyType": "group",
				"propertyKeyword": "Indxs",
				"propertyTooltip": "In general you should only add indexes to match the queries your application uses. Any extra will waste resources.",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "indxName",
						"propertyTooltip": "Optional, if not specified an automatic name will be assigned. Index name are needed to drop indexes and appear in error messages when a constraint is violated.",
						"propertyType": "text"
					},
					{
						"propertyName": "Activated",
						"propertyKeyword": "isActivated",
						"propertyTooltip": "Deactivated item will be not included in FE script",
						"propertyType": "checkbox",
						"defaultValue": true
					},
					{
						"propertyName": "Method",
						"propertyKeyword": "index_method",
						"propertyTooltip": "",
						"propertyType": "select",
						"defaultValue": "btree",
						"options": ["","btree", "hash", "gist", "spgist", "gin", "brin"]
					},
					{
						"propertyName": "Unique",
						"propertyKeyword": "unique",
						"propertyTooltip": "Causes the system to check for duplicate values in the table when the index is created (if data already exist) and each time data is added. Attempts to insert or update data which would result in duplicate entries will generate an error.",
						"defaultValue": false,
						"propertyType": "checkbox",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "index_method",
									"value": "btree"
								}
							]
						}
					},
					{
						"propertyName": "Nulls Distinct",
						"propertyKeyword": "nullsDistinct",
						"propertyType": "select",
						"defaultValue": "",
						"options": ["", "NULLS DISTINCT", "NULLS NOT DISTINCT"],
						"dependency": {
							"type": "and",
							"values": [
								{
									"key": "unique",
									"value": true
								},
								{
									"key": "index_method",
									"value": "btree"
								},
								{
									"type": "or",
									"values": [
										{
											"level": "model",
											"key": "dbVersion",
											"value": "v15.x"
										}
									]
								}
							]
						}
					},
					{
						"propertyName": "Concurrent build",
						"propertyKeyword": "concurrently",
						"propertyTooltip": "When this option is used, CockroachDB will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done.",
						"defaultValue": false,
						"propertyType": "checkbox"
					},
					{
						"propertyName": "If not exist",
						"propertyKeyword": "ifNotExist",
						"propertyTooltip": "The index will only be created if an index with the same name does not already exist. If the index already exists, then a warning will be triggered by default.",
						"defaultValue": true,
						"propertyType": "checkbox"
					},
					{
						"propertyName": "Only",
						"propertyKeyword": "only",
						"propertyTooltip": "Indicates not to recurse creating indexes on partitions, if the table is partitioned.",
						"defaultValue": true,
						"propertyType": "checkbox"
					},
					{
						"propertyName": "Columns",
						"propertyKeyword": "columns",
						"propertyType": "fieldList",
						"template": "orderedList",
						"propertyTooltip": "The name of a column of the table.",
						"attributeList": {
							"collation": {
								"propertyType": "text",
								"placeholder": "Collation",
								"propertyTooltip": "The name of the collation to use for the index."
							},
							"opclass": {
								"propertyType": "text",
								"placeholder": "Opclass",
								"propertyTooltip": "The name of an operator class."
							}
						},
						"dependency": {
							"type": "not",
							"values": {
								"key": "index_method",
								"value": "btree"
							}
						}
					},
					{
						"propertyName": "Columns",
						"propertyKeyword": "columns",
						"propertyType": "fieldList",
						"template": "orderedList",
						"propertyTooltip": "The name of a column of the table.",
						"attributeList": {
							"sortOrder": {
								"propertyType": "select",
								"options": ["ASC", "DESC"],
								"propertyTooltip": "Specifies sort order"
							},
							"nullsOrder": {
								"propertyType": "select",
								"options": ["", "NULLS FIRST", "NULLS LAST"],
								"propertyTooltip": "Specifies that nulls sort order"
							},
							"collation": {
								"propertyType": "text",
								"placeholder": "Collation",
								"propertyTooltip": "The name of the collation to use for the index."
							},
							"opclass": {
								"propertyType": "text",
								"placeholder": "Opclass",
								"propertyTooltip": "The name of an operator class."
							}
						},
						"dependency": {
							"key": "index_method",
							"value": "btree"
						}
					},
					{
						"propertyName": "Include non-key columns",
						"propertyKeyword": "include",
						"propertyType": "fieldList",
						"template": "orderedList",
						"propertyTooltip": "The optional INCLUDE clause specifies a list of columns which will be included in the index as non-key columns.",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "index_method",
									"value": "btree"
								},
								{
									"key": "index_method",
									"value": "gist"
								}
							]
						}
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "index_storage_parameter",
						"propertyType": "block",
						"propertyTooltip": "The optional WITH clause specifies storage parameters for the index. Each index method has its own set of allowed storage parameters.",
						"structure": [
							{
								"propertyName": "Fill factor",
								"propertyKeyword": "index_fillfactor",
								"propertyType": "numeric",
								"valueType": "number",
								"propertyTooltip": "A percentage between 10 and 100. The fillfactor for an index is a percentage that determines how full the index method will try to pack index pages.",
								"minValue": 10,
								"maxValue": 100,
								"step": 1,
								"defaultValue": 100
							},
							{
								"propertyName": "Deduplicate items",
								"propertyKeyword": "deduplicate_items",
								"propertyType": "checkbox",
								"propertyTooltip": "Declare the table as an additional catalog table for purposes of logical replication.",
								"defaultValue": true
							}
						],
						"dependency": {
							"key": "index_method",
							"value": "btree"
						}
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "index_storage_parameter",
						"propertyType": "block",
						"propertyTooltip": "The optional WITH clause specifies storage parameters for the index. Each index method has its own set of allowed storage parameters.",
						"structure": [
							{
								"propertyName": "Fill factor",
								"propertyKeyword": "index_fillfactor",
								"propertyType": "numeric",
								"valueType": "number",
								"propertyTooltip": "A percentage between 10 and 100. The fillfactor for an index is a percentage that determines how full the index method will try to pack index pages.",
								"minValue": 10,
								"maxValue": 100,
								"step": 1,
								"defaultValue": 100
							}
						],
						"dependency": {
							"key": "index_method",
							"value": ["hash", "spgist"]
						}
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "index_storage_parameter",
						"propertyType": "block",
						"propertyTooltip": "The optional WITH clause specifies storage parameters for the index. Each index method has its own set of allowed storage parameters.",
						"structure": [
							{
								"propertyName": "Fill factor",
								"propertyKeyword": "index_fillfactor",
								"propertyType": "numeric",
								"valueType": "number",
								"propertyTooltip": "A percentage between 10 and 100. The fillfactor for an index is a percentage that determines how full the index method will try to pack index pages.",
								"minValue": 10,
								"maxValue": 100,
								"step": 1,
								"defaultValue": 100
							},
							{
								"propertyName": "Buffering",
								"propertyKeyword": "index_buffering",
								"propertyType": "select",
								"propertyTooltip": "Determines whether the buffering build technique is used to build the index.",
								"options": ["AUTO", "OFF", "ON"],
								"defaultValue": "AUTO"
							}
						],
						"dependency": {
							"key": "index_method",
							"value": "gist"
						}
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "index_storage_parameter",
						"propertyType": "block",
						"propertyTooltip": "The optional WITH clause specifies storage parameters for the index. Each index method has its own set of allowed storage parameters.",
						"structure": [
							{
								"propertyName": "Fast update",
								"propertyKeyword": "fastupdate",
								"propertyType": "checkbox",
								"propertyTooltip": "This setting controls usage of the fast update technique.",
								"defaultValue": true
							},
							{
								"propertyName": "Gin pending list limit",
								"propertyKeyword": "gin_pending_list_limit",
								"propertyType": "numeric",
								"valueType": "number",
								"propertyTooltip": "This value is specified in kilobytes. Sets the maximum size of a GIN index's pending list, which is used when fastupdate is enabled.",
								"minValue": 0,
								"step": 1,
								"defaultValue": 4000
							}
						],
						"dependency": {
							"key": "index_method",
							"value": "gin"
						}
					},
					{
						"propertyName": "With storage parameters",
						"propertyKeyword": "index_storage_parameter",
						"propertyType": "block",
						"propertyTooltip": "The optional WITH clause specifies storage parameters for the index. Each index method has its own set of allowed storage parameters.",
						"structure": [
							{
								"propertyName": "Pages per range",
								"propertyKeyword": "pages_per_range",
								"propertyType": "numeric",
								"valueType": "number",
								"propertyTooltip": "Defines the number of table blocks that make up one block range for each entry of a BRIN index.",
								"minValue": 0,
								"step": 1,
								"defaultValue": 128
							},
							{
								"propertyName": "Auto summarize",
								"propertyKeyword": "autosummarize",
								"propertyType": "checkbox",
								"propertyTooltip": "Defines whether a summarization run is invoked for the previous page range whenever an insertion is detected on the next one.",
								"defaultValue": true
							}
						],
						"dependency": {
							"key": "index_method",
							"value": "brin"
						}
					},
					{
						"propertyName": "Where constraint",
						"propertyKeyword": "where",
						"propertyTooltip": "Popup for multi-line text entry",
						"propertyType": "details",
						"markdown": false,
						"template": "textarea"
					},
					{
						"propertyName": "Comment",
						"propertyKeyword": "indexComment",
						"propertyTooltip": "comment",
						"addTimestampButton": false,
						"propertyType": "details",
						"template": "textarea"
					}
				]
			}
		]
	},
	{
		"lowerTab": "Check Constraints",
		"structure": [
			{
				"propertyName": "Check Constraint",
				"propertyType": "group",
				"propertyKeyword": "chkConstr",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "chkConstrName",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Description",
						"propertyKeyword": "constrDescription",
						"propertyTooltip": "description",
						"propertyType": "details",
						"template": "textarea"
					},
					{
						"propertyName": "Expression",
						"propertyKeyword": "constrExpression",
						"propertyTooltip": "Expression",
						"propertyType": "details",
						"template": "textarea",
						"markdown": false
					},
					{
						"propertyName": "No inherit",
						"propertyKeyword": "noInherit",
						"propertyTooltip": "No inherit",
						"propertyType": "checkbox"
					},
					{
						"propertyName": "Comments",
						"propertyKeyword": "constrComments",
						"propertyTooltip": "comments",
						"addTimestampButton": false,
						"propertyType": "details",
						"template": "textarea"
					}
				]
			}
		]
	}
]
